using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcimgui"], :libcimgui),
    LibraryProduct(prefix, ["libcimgui_helper"], :libcimgui_helper),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/CImGuiBuilder/releases/download/v1.73.0-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/CImGui.v1.73.0.aarch64-linux-gnu.tar.gz", "27421638053612a1a225d3268961322ec21176e6a238b468fccba1bde81ea226"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/CImGui.v1.73.0.aarch64-linux-musl.tar.gz", "f6f6c003d841af44189fe9e491a799abf66d404bde6cc7c770ea9fbddf37bac5"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/CImGui.v1.73.0.arm-linux-gnueabihf.tar.gz", "1a31cdc85db2c7b24d7565442ad608944a19aca694a4707b78bc4582dc8ecf32"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/CImGui.v1.73.0.arm-linux-musleabihf.tar.gz", "ca64bdb3eed62f66e2ba0b177a90095691e54f2cafcfc05f64db3410161c60d7"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/CImGui.v1.73.0.i686-linux-gnu.tar.gz", "91e973a0a38c22ad5569eabfa8ae8fa6be033ebca429bf401b57f98271c81af6"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/CImGui.v1.73.0.i686-linux-musl.tar.gz", "f5cfe63ec85a0b5a63277f61763a463230fefc1456c2e4346938c4607abc6188"),
    Windows(:i686) => ("$bin_prefix/CImGui.v1.73.0.i686-w64-mingw32.tar.gz", "ba699e6104d86f2572bb1d2be205e1ece4fb8d5e853b47f8f6c7636d18e3d9a3"),
    MacOS(:x86_64) => ("$bin_prefix/CImGui.v1.73.0.x86_64-apple-darwin14.tar.gz", "335a93117e240715a2b0248020b2ce642079cf1304e76fbb477d7526a7baad7e"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/CImGui.v1.73.0.x86_64-linux-gnu.tar.gz", "3066167371efe12fcc32904811d7b15498b44b2402915f980f144b4077c9bcef"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/CImGui.v1.73.0.x86_64-linux-musl.tar.gz", "561fa010f7478b9d4ba8c6182fca5c7bf334ea8a4f525285f41b6b815da3aa26"),
    FreeBSD(:x86_64) => ("$bin_prefix/CImGui.v1.73.0.x86_64-unknown-freebsd11.1.tar.gz", "c43961071316e23802274d557bc140cd4014bd561613d693cb7793141ff4cda3"),
    Windows(:x86_64) => ("$bin_prefix/CImGui.v1.73.0.x86_64-w64-mingw32.tar.gz", "ce8c0d6cd7b44aca4eddb25879b9c5ad053cd2de2b4e952ce4011892be3d1f4a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
